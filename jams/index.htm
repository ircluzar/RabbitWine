<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jams - Music Player</title>
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon.png">
    <link rel="manifest" href="../manifest.json">
    <link rel="stylesheet" href="../mainmenu.css">
    <link rel="stylesheet" href="../stars.css">
    <link rel="stylesheet" href="../modals.css">
    <style>
    html, body {
        height: auto !important;
        overflow-y: auto !important;
        overflow-x: hidden;
        overscroll-behavior: auto !important;
        touch-action: auto !important;
        min-height: 100vh;
        margin: 0;
        padding: 0;
    }
    
    .background-animation {
        position: fixed !important;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh !important;
        z-index: 0 !important;
        pointer-events: none;
    }
    
    .jams-main {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px 8px 40px 8px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        position: relative;
        z-index: 2;
        height: auto;
        min-height: 100vh;
        margin-top: 32px;
    }
    
    /* Navigation styles */
    .nav-header {
        width: 100%;
        max-width: 1000px;
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 2rem;
    }
    
    .back-btn {
        min-width: 48px;
        min-height: 48px;
        border-radius: 50%;
        background: var(--bg-accent);
        color: var(--text-primary);
        border: 1.5px solid var(--border-color);
        font-size: 1.2rem;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .back-btn:hover {
        background: var(--accent-purple);
        color: #1a1626;
        transform: scale(1.1);
    }
    
    .page-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--text-primary);
        flex: 1;
    }
    
    /* Artists grid */
    .artists-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 1.5rem;
        width: 100%;
        max-width: 1000px;
        padding: 1rem 0;
    }
    
    .artist-card {
        background: var(--bg-accent);
        border-radius: 16px;
        border: 1.5px solid var(--border-color);
        padding: 1.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        position: relative;
        overflow: hidden;
    }
    
    .artist-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, var(--accent-purple), transparent);
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: 1;
    }
    
    .artist-card:hover::before {
        opacity: 0.1;
    }
    
    .artist-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 8px 25px rgba(204,188,252,0.2);
        border-color: var(--accent-purple);
    }
    
    .artist-image {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid var(--border-color);
        margin-bottom: 1rem;
        position: relative;
        z-index: 2;
        transition: all 0.3s ease;
    }
    
    .artist-card:hover .artist-image {
        border-color: var(--accent-purple);
        transform: scale(1.05);
    }
    
    .artist-name {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--text-primary);
        margin: 0;
        position: relative;
        z-index: 2;
    }
    
    /* Albums grid */
    .albums-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1.5rem;
        width: 100%;
        max-width: 1000px;
        padding: 1rem 0;
    }
    
    .album-card {
        background: var(--bg-accent);
        border-radius: 16px;
        border: 1.5px solid var(--border-color);
        padding: 1.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        position: relative;
        overflow: hidden;
    }
    
    .album-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, var(--accent-purple), transparent);
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: 1;
    }
    
    .album-card:hover::before {
        opacity: 0.1;
    }
    
    .album-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 8px 25px rgba(204,188,252,0.2);
        border-color: var(--accent-purple);
    }
    
    .album-cover {
        width: 150px;
        height: 150px;
        border-radius: 12px;
        object-fit: cover;
        border: 2px solid var(--border-color);
        margin-bottom: 1rem;
        position: relative;
        z-index: 2;
        transition: all 0.3s ease;
    }
    
    .album-card:hover .album-cover {
        border-color: var(--accent-purple);
        transform: scale(1.05);
    }
    
    .album-title {
        font-size: 1rem;
        font-weight: 600;
        color: var(--text-primary);
        margin: 0 0 0.5rem 0;
        position: relative;
        z-index: 2;
        line-height: 1.3;
    }
    
    .album-year {
        font-size: 0.9rem;
        color: var(--text-accent);
        margin: 0;
        position: relative;
        z-index: 2;
    }
    
    /* Page containers */
    .page {
        display: none;
        width: 100%;
        max-width: 1000px;
        animation: fadeIn 0.3s ease;
    }
    
    .page.active {
        display: block;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    /* View Artist on Redscientist button */
    .redscientist-btn {
        display: inline-block;
        width: auto;
        max-width: 280px;
        margin: 0 auto 2rem auto;
        padding: 0.7rem 1.2rem;
        background: var(--bg-secondary);
        color: var(--text-accent);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        font-size: 0.9rem;
        font-weight: 500;
        text-decoration: none;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s ease;
        box-shadow: none;
    }
    
    .redscientist-btn:hover {
        background: var(--bg-accent);
        color: var(--text-primary);
        border-color: var(--accent-purple);
        text-decoration: none;
        transform: none;
    }
    
    .redscientist-btn:active {
        transform: none;
    }
    
    /* Artist banner */
    .artist-banner {
        width: 100%;
        max-width: 400px;
        height: auto;
        border-radius: 8px;
        border: 1.5px solid var(--border-color);
        margin: 0 auto 1.5rem auto;
        display: block;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
    }
    
    .artist-banner:hover {
        border-color: var(--accent-purple);
        box-shadow: 0 4px 12px rgba(204,188,252,0.15);
    }
    
    /* Loading state */
    .loading-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 3rem;
        color: var(--text-accent);
    }
    
    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 3px solid var(--bg-secondary);
        border-top: 3px solid var(--accent-purple);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 1rem;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    /* Error state */
    .error-state {
        text-align: center;
        padding: 3rem;
        color: var(--text-accent);
    }
    
    .error-message {
        font-size: 1.1rem;
        margin-bottom: 1rem;
    }
    
    .retry-btn {
        background: var(--accent-purple);
        color: #1a1626;
        border: none;
        padding: 0.7rem 1.5rem;
        border-radius: 8px;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .retry-btn:hover {
        background: var(--accent-hover);
        transform: scale(1.05);
    }
    
    /* Shuffle All Button */
    .shuffle-all-btn {
        background: var(--bg-accent);
        border-radius: 16px;
        border: 1.5px solid var(--border-color);
        padding: 1.5rem 3rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: block;
        margin: 0 auto 2rem auto;
        width: fit-content;
        min-width: 200px;
        position: relative;
        overflow: hidden;
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--text-primary);
        text-align: center;
    }
    
    .shuffle-all-btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, var(--accent-purple), transparent);
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: 1;
    }
    
    .shuffle-all-btn:hover::before {
        opacity: 0.1;
    }
    
    .shuffle-all-btn:hover {
        transform: translateY(-8px);
        box-shadow: 0 8px 25px rgba(204,188,252,0.2);
        border-color: var(--accent-purple);
    }
    
    .shuffle-all-btn:active {
        transform: translateY(-4px);
    }
    
    .shuffle-all-btn:disabled {
        background: var(--bg-secondary);
        color: var(--text-accent);
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
        border-color: var(--border-color);
    }
    
    .shuffle-all-btn:disabled::before {
        opacity: 0;
    }
    
    .jams-title {
        font-size: 2.1rem;
        font-weight: 700;
        margin-bottom: 0.3rem;
        margin-top: 18px;
        background: linear-gradient(45deg, var(--accent-purple), #fff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        text-align: center;
        max-width: 100vw;
        margin-left: auto;
        margin-right: auto;
        word-break: break-word;
        transition: opacity 0.5s;
    }
    
    .jams-subtitle {
        font-size: 1rem;
        font-weight: 400;
        color: var(--text-accent);
        text-align: center;
        margin-bottom: 2rem;
        opacity: 0.8;
    }
    
    .main-header {
        transition: all 0.3s ease;
    }
    
    .main-header.hidden {
        display: none;
    }
    
    .player-container {
        display: flex;
        flex-direction: column;
        gap: 2rem;
        width: 100%;
        max-width: 1000px;
        margin: 0 auto;
    }
    
    .tracks-panel {
        background: var(--bg-accent);
        border-radius: 16px;
        border: 1.5px solid var(--border-color);
        padding: 16px;
    }
    
    .panel-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--accent-purple);
        margin: 0 0 1rem 0;
        text-align: center;
    }
    
    .track-item {
        display: flex;
        align-items: center;
        padding: 0.7rem;
        margin-bottom: 0.5rem;
        background: var(--bg-secondary);
        border-radius: 8px;
        border: 1px solid var(--border-color);
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .track-item:hover {
        background: var(--accent-purple);
        color: #1a1626;
        transform: translateX(4px);
    }
    
    .track-item.playing {
        background: var(--accent-purple);
        color: #1a1626;
        border-color: var(--accent-purple);
    }
    
    .track-number {
        min-width: 30px;
        font-size: 0.8rem;
        opacity: 0.8;
    }
    
    .track-name {
        flex: 1;
        font-weight: 500;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        min-width: 0;
    }
    
    .player-card {
        background: var(--bg-accent);
        border-radius: 22px;
        box-shadow: 0 2px 8px rgba(204,188,252,0.07);
        border: 1.5px solid var(--border-color);
        padding: 18px;
        margin-bottom: 1rem;
        position: sticky;
        top: 20px;
        z-index: 10;
    }
    
    .current-track {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }
    
    .album-art {
        width: 320px;
        height: 320px;
        border-radius: 16px;
        background: var(--bg-secondary);
        border: 2px solid var(--border-color);
        object-fit: cover;
        box-shadow: 0 10px 30px rgba(0,0,0,0.25);
        transition: all 0.3s ease;
        cursor: pointer;
        position: relative;
    }
    
    .album-art:hover {
        border-color: var(--accent-purple);
        box-shadow: 0 15px 40px rgba(204,188,252,0.3);
        transform: scale(1.02);
    }
    
    .album-art:hover::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(204,188,252,0.1);
        border-radius: 14px;
        pointer-events: none;
        transition: opacity 0.3s ease;
    }
    
    /* Album Art Modal Styles */
    .album-art-modal .modal-content {
        padding: 0;
        text-align: center;
        background: transparent;
    }
    
    .album-art-modal .modal-box {
        background: transparent;
        border: none;
        box-shadow: none;
        max-width: min(90vw, 90vh);
        max-height: 90vh;
    }
    
    .album-art-modal .modal-header {
        background: rgba(35, 32, 58, 0.9);
        backdrop-filter: blur(10px);
        border-radius: 12px 12px 0 0;
        padding: 1rem;
        margin: 0;
    }
    
    .album-art-modal .modal-actions {
        background: rgba(35, 32, 58, 0.9);
        backdrop-filter: blur(10px);
        border-radius: 0 0 12px 12px;
        padding: 1rem;
        margin: 0;
    }
    
    .album-art-modal-image {
        width: 100%;
        height: auto;
        max-width: min(90vw, 90vh);
        max-height: 70vh;
        object-fit: contain;
        border-radius: 0;
        box-shadow: 0 20px 60px rgba(0,0,0,0.5);
    }
    
    .album-art-modal-info {
        color: var(--text-primary);
        font-size: 1rem;
        margin-top: 0.5rem;
    }
    
    .album-art-modal-title {
        font-weight: 600;
        margin-bottom: 0.25rem;
    }
    
    .album-art-modal-details {
        color: var(--text-accent);
        font-size: 0.9rem;
    }
    
    /* Mobile optimizations for album art modal */
    @media (max-width: 768px) {
        .album-art-modal .modal-box {
            max-width: 95vw;
            max-height: 95vh;
        }
        
        .album-art-modal-image {
            max-width: 95vw;
            max-height: 75vh;
        }
        
        .album-art-modal .modal-header,
        .album-art-modal .modal-actions {
            padding: 0.75rem;
        }
        
        .album-art-modal-info {
            font-size: 0.9rem;
        }
    }
    
    .track-info {
        flex: 1;
        min-width: 0;
    }
    
    .track-title {
        font-size: 1.3rem;
        font-weight: 600;
        color: var(--text-primary);
        margin: 0 0 0.3rem 0;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    
    .track-artist {
        font-size: 1.1rem;
        color: var(--text-accent);
        margin: 0 0 0.3rem 0;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    
    .track-album {
        font-size: 1rem;
        color: var(--text-accent);
        margin: 0;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    
    .player-controls {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }
    
    .control-btn {
        min-width: 48px;
        min-height: 48px;
        border-radius: 50%;
        background: var(--accent-purple);
        color: #1a1626;
        border: none;
        font-size: 1.2rem;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }
    
    .control-btn:hover {
        background: var(--accent-hover);
        transform: scale(1.1);
    }
    
    .control-btn.play-pause {
        min-width: 56px;
        min-height: 56px;
        font-size: 1.4rem;
    }
    
    /* Button icons using CSS shapes */
    .control-btn::before {
        content: '';
        display: block;
        width: 0;
        height: 0;
    }
    
    .control-btn.play::before {
        border-left: 8px solid currentColor;
        border-top: 6px solid transparent;
        border-bottom: 6px solid transparent;
        margin-left: 2px;
    }
    
    .control-btn.pause::before {
        width: 8px;
        height: 12px;
        background: currentColor;
        box-shadow: 4px 0 0 currentColor;
    }
    
    .control-btn.prev::before {
        border-right: 6px solid currentColor;
        border-top: 5px solid transparent;
        border-bottom: 5px solid transparent;
        box-shadow: -3px 0 0 currentColor;
    }
    
    .control-btn.next::before {
        border-left: 6px solid currentColor;
        border-top: 5px solid transparent;
        border-bottom: 5px solid transparent;
        box-shadow: 3px 0 0 currentColor;
    }
    
    .progress-container {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }
    
    .time-display {
        font-size: 0.8rem;
        color: var(--text-accent);
        min-width: 40px;
        text-align: center;
    }
    
    .progress-bar {
        flex: 1;
        height: 6px;
        background: var(--bg-secondary);
        border-radius: 3px;
        overflow: hidden;
        cursor: pointer;
    }
    
    .progress-fill {
        height: 100%;
        background: var(--accent-purple);
        width: 0%;
        transition: width 0.1s;
    }
    
    .volume-container {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .volume-slider {
        width: 100px;
        height: 6px;
        background: var(--bg-secondary);
        border-radius: 3px;
        appearance: none;
        cursor: pointer;
    }
    
    .volume-slider::-webkit-slider-thumb {
        appearance: none;
        width: 16px;
        height: 16px;
        background: var(--accent-purple);
        border-radius: 50%;
        cursor: pointer;
    }
    
    
    .volume-container {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .volume-slider {
        width: 100px;
        height: 6px;
        background: var(--bg-secondary);
        border-radius: 3px;
        appearance: none;
        cursor: pointer;
    }
    
    .volume-slider::-webkit-slider-thumb {
        appearance: none;
        width: 16px;
        height: 16px;
        background: var(--accent-purple);
        border-radius: 50%;
        cursor: pointer;
    }
    
    .shuffle-btn {
        background: var(--bg-secondary) !important;
        color: var(--text-primary) !important;
        border: 1px solid var(--border-color) !important;
        padding: 0.5rem 1rem !important;
        border-radius: 8px !important;
        font-size: 0.9rem !important;
        cursor: pointer;
        transition: all 0.2s;
        margin-left: 1rem;
        min-width: auto !important;
        min-height: auto !important;
        display: flex !important;
        align-items: center;
        gap: 0.5rem;
    }
    
    .shuffle-btn:hover {
        background: var(--accent-purple) !important;
        color: #1a1626 !important;
        transform: scale(1.05) !important;
    }
    
    .shuffle-btn.active {
        background: var(--accent-purple) !important;
        color: #1a1626 !important;
    }
    
    .shuffle-btn::before {
        content: '';
        width: 12px;
        height: 12px;
        border: 2px solid currentColor;
        border-radius: 2px;
        position: relative;
    }
    
    .shuffle-btn::after {
        content: '';
        width: 8px;
        height: 8px;
        border: 1px solid currentColor;
        border-radius: 1px;
        position: absolute;
        margin-left: 6px;
        margin-top: 6px;
    }
    
    /* Mobile responsive adjustments */
    @media (max-width: 768px) {
        .artists-grid, .albums-grid {
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
        }
        
        .artist-image {
            width: 100px;
            height: 100px;
        }
        
        .album-cover {
            width: 120px;
            height: 120px;
        }
        
        .current-track {
            flex-direction: column;
            text-align: center;
            gap: 0.7rem;
        }
        
        .track-info {
            text-align: center;
        }
        
        .player-controls {
            gap: 0.7rem;
        }
        
        .volume-container {
            justify-content: center;
            flex-wrap: wrap;
        }
        
        .jams-title {
            font-size: 1.8rem;
        }
        
        .tracks-panel {
            padding: 12px;
        }
        
        .track-item {
            padding: 0.5rem;
        }
        
        .track-number {
            min-width: 25px;
            font-size: 0.75rem;
        }
        
        .artist-banner {
            max-width: 300px;
            margin-bottom: 1rem;
        }
        
        .track-title {
            font-size: 1.1rem;
        }
        
        .track-artist {
            font-size: 1rem;
        }
        
        .track-album {
            font-size: 0.9rem;
        }
        
        .shuffle-all-btn {
            padding: 1rem 2rem;
            font-size: 1rem;
            min-width: 160px;
        }
    }
    
    @media (max-width: 480px) {
        .artists-grid, .albums-grid {
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        }
        
        .artist-image {
            width: 80px;
            height: 80px;
        }
        
        .album-cover {
            width: 100px;
            height: 100px;
        }
        
        .player-card {
            padding: 12px;
        }
        
        .album-art {
            width: 240px;
            height: 240px;
        }
        
        .control-btn {
            min-width: 40px;
            min-height: 40px;
            font-size: 1rem;
        }
        
        .control-btn.play-pause {
            min-width: 48px;
            min-height: 48px;
            font-size: 1.2rem;
        }
        
        .jams-title {
            font-size: 1.6rem;
        }
        
        .shuffle-btn {
            margin-left: 0 !important;
            margin-top: 0.5rem !important;
        }
        
        .volume-container {
            flex-direction: column;
            gap: 0.7rem;
        }
        
        .artist-banner {
            max-width: 280px;
        }
        
        .album-art {
            width: 200px;
            height: 200px;
        }
        
        .track-title {
            font-size: 1rem;
        }
        
        .track-artist {
            font-size: 0.9rem;
        }
        
        .track-album {
            font-size: 0.8rem;
        }
        
        .shuffle-all-btn {
            padding: 0.8rem 1.5rem;
            font-size: 0.9rem;
            min-width: 140px;
        }
    }
    
    /* Mini Player Styles */
    .mini-player {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        height: 60px;
        background: var(--bg-accent);
        border-bottom: 1.5px solid var(--border-color);
        display: none;
        align-items: center;
        padding: 0 1rem;
        gap: 1rem;
        z-index: 1000;
        backdrop-filter: blur(10px);
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .mini-player:hover {
        background: var(--bg-secondary);
    }
    
    .mini-player.visible {
        display: flex;
    }
    
    .mini-album-art {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        object-fit: cover;
        border: 1px solid var(--border-color);
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .mini-album-art:hover {
        border-color: var(--accent-purple);
        transform: scale(1.05);
    }
    
    .mini-track-info {
        flex: 1;
        min-width: 0;
        display: flex;
        flex-direction: column;
        gap: 2px;
    }
    
    .mini-track-title {
        font-size: 0.9rem;
        font-weight: 500;
        color: var(--text-primary);
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        margin: 0;
    }
    
    .mini-track-artist {
        font-size: 0.75rem;
        color: var(--text-accent);
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        margin: 0;
    }
    
    .mini-controls {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .mini-control-btn {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: var(--accent-purple);
        color: #1a1626;
        border: none;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .mini-control-btn:hover {
        background: var(--accent-hover);
        transform: scale(1.1);
    }
    
    .mini-control-btn.close {
        background: var(--bg-secondary);
        color: var(--text-accent);
        font-size: 0.8rem;
        font-weight: bold;
    }
    
    .mini-control-btn.close:hover {
        background: #e74c3c;
        color: #fff;
        transform: scale(1.1);
    }
    
    .mini-progress {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 2px;
        background: rgba(255, 255, 255, 0.1);
    }
    
    .mini-progress-fill {
        height: 100%;
        background: var(--accent-purple);
        width: 0%;
        transition: width 0.1s;
    }
    
    /* Adjust body padding when mini player is visible */
    body.mini-player-visible {
        padding-top: 60px;
    }
    
    @media (max-width: 768px) {
        .mini-player {
            padding: 0 0.5rem;
            gap: 0.7rem;
        }
        
        .mini-track-title {
            font-size: 0.8rem;
        }
        
        .mini-track-artist {
            font-size: 0.7rem;
        }
        
        .mini-control-btn {
            width: 28px;
            height: 28px;
            font-size: 0.8rem;
        }
    }
    </style>
</head>
<body>
    <!-- Mini Player -->
    <div id="miniPlayer" class="mini-player" title="Click to return to player">
        <img id="miniAlbumArt" class="mini-album-art" src="" alt="Album Art">
        <div class="mini-track-info">
            <div id="miniTrackTitle" class="mini-track-title">No track selected</div>
            <div id="miniTrackArtist" class="mini-track-artist">No artist</div>
        </div>
        <div class="mini-controls">
            <button id="miniPlayPauseBtn" class="mini-control-btn play" title="Play/Pause">⏸</button>
            <button id="miniCloseBtn" class="mini-control-btn close" title="Close Player">✕</button>
        </div>
        <div class="mini-progress">
            <div id="miniProgressFill" class="mini-progress-fill"></div>
        </div>
    </div>
    
    <div class="background-animation" id="backgroundAnimation"></div>
    <div class="jams-main">
        <div id="mainHeader" class="main-header">
            <div class="jams-title">Jams</div>
            <div class="jams-subtitle">Redscientist Music Catalog</div>
        </div>
        
        <!-- Artists Page -->
        <div id="artistsPage" class="page active">
            <button id="shuffleAllBtn" class="shuffle-all-btn">Shuffle</button>
            <div id="artistsGrid" class="artists-grid">
                <div class="loading-state">
                    <div class="loading-spinner"></div>
                    <div>Loading artists...</div>
                </div>
            </div>
        </div>
        
        <!-- Albums Page -->
        <div id="albumsPage" class="page">
            <div class="nav-header">
                <button id="backToArtistsFromAlbums" class="back-btn">◀</button>
                <div id="artistPageTitle" class="page-title">Artist Albums</div>
            </div>
            <div style="text-align: center; margin-bottom: 2rem;">
                <img id="artistBanner" class="artist-banner" src="" alt="Artist Banner" style="display: none;">
                <a id="artistRedscientistBtn" class="redscientist-btn" href="#" target="_blank">
                    View Artist on Redscientist
                </a>
            </div>
            <div id="albumsGrid" class="albums-grid"></div>
        </div>
        
        <!-- Player Page -->
        <div id="playerPage" class="page">
            <div class="nav-header">
                <button id="backToAlbums" class="back-btn">◀</button>
                <div id="albumPageTitle" class="page-title">Album</div>
            </div>
            
            <div class="player-container">
                <!-- Music Player -->
                <div class="player-card">
                    <div class="current-track">
                        <img id="currentAlbumArt" class="album-art" src="" alt="Album Art">
                        <div class="track-info">
                            <div id="currentTrackTitle" class="track-title">Select a track</div>
                            <div id="currentTrackArtist" class="track-artist">No artist</div>
                            <div id="currentTrackAlbum" class="track-album">No album</div>
                        </div>
                    </div>
                    
                    <div class="player-controls">
                        <button id="prevBtn" class="control-btn prev" title="Previous"></button>
                        <button id="playPauseBtn" class="control-btn play-pause play" title="Play/Pause"></button>
                        <button id="nextBtn" class="control-btn next" title="Next"></button>
                    </div>
                    
                    <div class="progress-container">
                        <div id="currentTime" class="time-display">0:00</div>
                        <div id="progressBar" class="progress-bar">
                            <div id="progressFill" class="progress-fill"></div>
                        </div>
                        <div id="totalTime" class="time-display">0:00</div>
                    </div>
                    
                    <div class="volume-container">
                        <span>🔊</span>
                        <input type="range" id="volumeSlider" class="volume-slider" min="0" max="100" value="100">
                        <button id="shuffleBtn" class="shuffle-btn" title="Shuffle">Shuffle</button>
                    </div>
                </div>
                
                <!-- Track List -->
                <div class="tracks-panel">
                    <div class="panel-title">Tracks</div>
                    <div id="tracksList"></div>
                </div>
            </div>
        </div>
    </div>
    
    <audio id="audioPlayer" preload="metadata"></audio>
    
    <script src="../modals.js"></script>
    <script src="../memory.js"></script>
    <script src="../stars.js"></script>
    <script>
    class MusicPlayer {
        constructor() {
            this.audio = document.getElementById('audioPlayer');
            this.currentPlaylist = [];
            this.currentTrackIndex = 0;
            this.isPlaying = false;
            this.shuffleMode = false;
            this.shuffledIndices = [];
            this.shuffleIndex = 0;
            this.artists = [];
            this.currentArtist = null;
            this.currentAlbum = null;
            this.currentPage = 'artists';
            this.lastStateSave = 0;
            
            this.initializeElements();
            this.initializeEventListeners();
            this.loadArtists();
            
            // Try to load saved state after initialization
            setTimeout(() => {
                const stateLoaded = this.loadPlayerState();
                if (stateLoaded) {
                    console.log('Loaded player state from memory');
                }
                this.handleURLFragment();
            }, 100);
        }
        
        handleURLFragment() {
            // Check if URL has a fragment to navigate to player
            const fragment = window.location.hash.substring(1);
            if (fragment === 'player') {
                // Wait a bit for the page to load and then show player
                setTimeout(() => {
                    if (this.currentPlaylist.length > 0) {
                        this.navigateToPage('playerPage', true);
                    }
                }, 100);
            }
        }
        
        // Save current player state to memory
        savePlayerState() {
            if (!this.currentPlaylist.length) {
                memory.remove('Jams', 'playerState');
                return;
            }
            
            const state = {
                playlist: this.currentPlaylist,
                currentTrackIndex: this.currentTrackIndex,
                currentPosition: this.audio.currentTime || 0,
                volume: this.audio.volume || 1.0,
                shuffleMode: this.shuffleMode,
                shuffledIndices: this.shuffledIndices,
                shuffleIndex: this.shuffleIndex,
                currentArtist: this.currentArtist,
                currentAlbum: this.currentAlbum,
                albumPageTitle: this.albumPageTitle.textContent,
                timestamp: Date.now()
            };
            
            memory.write('Jams', 'playerState', state);
        }
        
        // Load player state from memory
        loadPlayerState() {
            const state = memory.read('Jams', 'playerState');
            if (!state || !state.playlist || !state.playlist.length) {
                return false;
            }
            
            // Check if state is not too old (7 days)
            const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 days
            if (Date.now() - state.timestamp > maxAge) {
                memory.remove('Jams', 'playerState');
                return false;
            }
            
            // Restore state
            this.currentPlaylist = state.playlist;
            this.currentTrackIndex = state.currentTrackIndex || 0;
            this.shuffleMode = state.shuffleMode || false;
            this.shuffledIndices = state.shuffledIndices || [];
            this.shuffleIndex = state.shuffleIndex || 0;
            this.currentArtist = state.currentArtist || null;
            this.currentAlbum = state.currentAlbum || null;
            
            // Restore album page title for correct track display format
            if (state.albumPageTitle) {
                this.albumPageTitle.textContent = state.albumPageTitle;
            }
            
            // Restore volume
            this.audio.volume = state.volume || 1.0;
            this.volumeSlider.value = (state.volume || 1.0) * 100;
            
            // Update UI without playing
            this.renderTracks(this.currentPlaylist);
            this.updateTrackDisplay();
            this.updateShuffleButton();
            this.updateMiniPlayer();
            this.updateMiniPlayerVisibility();
            
            // Set up audio for position restoration
            if (this.currentPlaylist[this.currentTrackIndex]) {
                const track = this.currentPlaylist[this.currentTrackIndex];
                this.audio.src = track.location;
                this.audio.currentTime = state.currentPosition || 0;
                
                // Update progress display
                this.audio.addEventListener('loadedmetadata', () => {
                    this.audio.currentTime = state.currentPosition || 0;
                    this.updateProgress();
                }, { once: true });
            }
            
            return true;
        }
        
        // Update track display and UI elements
        updateTrackDisplay() {
            if (this.currentPlaylist.length > 0 && this.currentTrackIndex >= 0) {
                const track = this.currentPlaylist[this.currentTrackIndex];
                
                // Update current track display
                this.currentTrackTitle.textContent = track.title;
                this.currentTrackArtist.textContent = track.creator;
                this.currentTrackAlbum.textContent = track.album;
                
                // Update album art
                this.currentAlbumArt.src = `https://redscientist.com/Content/music/${track.albumId}/front.jpg`;
                
                // Update page title
                this.albumPageTitle.textContent = this.currentAlbum ? this.currentAlbum.name : 'Player';
                
                // Update track list highlighting
                document.querySelectorAll('.track-item').forEach(el => el.classList.remove('playing'));
                const trackElements = document.querySelectorAll('.track-item');
                if (trackElements[this.currentTrackIndex]) {
                    trackElements[this.currentTrackIndex].classList.add('playing');
                }
                
                // Update browser tab title
                document.title = `${track.creator} - ${track.title}`;
            }
        }
        
        // Update shuffle button state
        updateShuffleButton() {
            this.shuffleBtn.classList.toggle('active', this.shuffleMode);
        }
        
        // Clear saved player state
        clearPlayerState() {
            memory.remove('Jams', 'playerState');
        }
        
        // Show confirmation modal before clearing playlist
        async showClearPlaylistModal() {
            const trackCount = this.currentPlaylist.length;
            const currentTrack = trackCount > 0 ? this.currentPlaylist[this.currentTrackIndex] : null;
            
            let message = `Are you sure you want to discard your current playlist?`;
            if (trackCount > 0) {
                message += `\n\nThis will remove ${trackCount} track${trackCount !== 1 ? 's' : ''} from your queue.`;
                if (currentTrack) {
                    message += `\n\nCurrently playing: "${currentTrack.title}" by ${currentTrack.creator}`;
                }
            }
            
            const confirmed = await Modals.confirm(
                message,
                'Clear Playlist',
                'Yes, Clear',
                'Cancel'
            );
            
            if (confirmed) {
                this.clearPlaylistAndHideMiniPlayer();
            }
        }
        
        // Clear playlist and hide mini player
        clearPlaylistAndHideMiniPlayer() {
            // Stop and reset audio
            this.audio.pause();
            this.audio.currentTime = 0;
            this.audio.src = '';
            
            // Clear playlist and state
            this.currentPlaylist = [];
            this.currentTrackIndex = 0;
            this.isPlaying = false;
            this.shuffleMode = false;
            this.shuffledIndices = [];
            this.shuffleIndex = 0;
            this.currentArtist = null;
            this.currentAlbum = null;
            
            // Clear saved state
            this.clearPlayerState();
            
            // Update UI
            this.updateMiniPlayerVisibility();
            this.updateMediaSession();
            
            // Clear localStorage state for other pages
            try {
                localStorage.removeItem('jamsMusicState');
                localStorage.removeItem('JamsMusicState');
            } catch (e) {
                console.warn('Could not clear localStorage:', e);
            }
            
            // Reset document title
            document.title = 'Jams - Music Player';
            
            // If we're on the player page, go back to artists
            if (this.currentPage === 'player') {
                this.showArtistsPage();
            }
        }
        
        initializeElements() {
            // Player controls
            this.playPauseBtn = document.getElementById('playPauseBtn');
            this.prevBtn = document.getElementById('prevBtn');
            this.nextBtn = document.getElementById('nextBtn');
            this.shuffleBtn = document.getElementById('shuffleBtn');
            this.volumeSlider = document.getElementById('volumeSlider');
            this.progressBar = document.getElementById('progressBar');
            this.progressFill = document.getElementById('progressFill');
            this.currentTime = document.getElementById('currentTime');
            this.totalTime = document.getElementById('totalTime');
            this.currentTrackTitle = document.getElementById('currentTrackTitle');
            this.currentTrackArtist = document.getElementById('currentTrackArtist');
            this.currentTrackAlbum = document.getElementById('currentTrackAlbum');
            this.currentAlbumArt = document.getElementById('currentAlbumArt');
            
            // Mini player elements
            this.miniPlayer = document.getElementById('miniPlayer');
            this.miniAlbumArt = document.getElementById('miniAlbumArt');
            this.miniTrackTitle = document.getElementById('miniTrackTitle');
            this.miniTrackArtist = document.getElementById('miniTrackArtist');
            this.miniPlayPauseBtn = document.getElementById('miniPlayPauseBtn');
            this.miniCloseBtn = document.getElementById('miniCloseBtn');
            this.miniProgressFill = document.getElementById('miniProgressFill');
            
            // Pages
            this.artistsPage = document.getElementById('artistsPage');
            this.albumsPage = document.getElementById('albumsPage');
            this.playerPage = document.getElementById('playerPage');
            this.mainHeader = document.getElementById('mainHeader');
            
            // Content containers
            this.artistsGrid = document.getElementById('artistsGrid');
            this.albumsGrid = document.getElementById('albumsGrid');
            this.tracksList = document.getElementById('tracksList');
            
            // Navigation
            this.backToArtistsFromAlbums = document.getElementById('backToArtistsFromAlbums');
            this.backToAlbums = document.getElementById('backToAlbums');
            this.artistPageTitle = document.getElementById('artistPageTitle');
            this.albumPageTitle = document.getElementById('albumPageTitle');
            
            // Redscientist button
            this.artistRedscientistBtn = document.getElementById('artistRedscientistBtn');
            this.artistBanner = document.getElementById('artistBanner');
            
            // Shuffle All button
            this.shuffleAllBtn = document.getElementById('shuffleAllBtn');
        }
        
        initializeEventListeners() {
            // Player controls
            this.playPauseBtn.addEventListener('click', () => this.togglePlayPause());
            this.prevBtn.addEventListener('click', () => this.previousTrack());
            this.nextBtn.addEventListener('click', () => this.nextTrack());
            this.shuffleBtn.addEventListener('click', () => this.toggleShuffle());
            this.volumeSlider.addEventListener('input', (e) => this.setVolume(e.target.value));
            this.progressBar.addEventListener('click', (e) => this.seek(e));
            
            // Shuffle All button
            this.shuffleAllBtn.addEventListener('click', () => this.shuffleAllMusic());
            
            // Mini player controls
            this.miniPlayPauseBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                this.togglePlayPause();
            });
            this.miniCloseBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                this.showClearPlaylistModal();
            });
            this.miniAlbumArt.addEventListener('click', (e) => {
                e.stopPropagation();
                this.showAlbumArtModal();
            });
            this.miniPlayer.addEventListener('click', () => this.navigateToPage('playerPage', true));
            
            // Audio events
            this.audio.addEventListener('loadedmetadata', () => this.updateDuration());
            this.audio.addEventListener('timeupdate', () => this.updateProgress());
            this.audio.addEventListener('ended', () => this.nextTrack());
            this.audio.addEventListener('error', () => this.handleAudioError());
            
            // Navigation - use browser back button
            this.backToArtistsFromAlbums.addEventListener('click', () => history.back());
            this.backToAlbums.addEventListener('click', () => history.back());
            
            // Album art click to open modal
            this.currentAlbumArt.addEventListener('click', () => this.showAlbumArtModal());
            
            // Mouse back button support
            document.addEventListener('mouseup', (e) => this.handleMouseBackButton(e));
            
            // Enhanced mobile back button support
            this.setupMobileBackHandling();
            
            // Listen for actions from other pages
            window.addEventListener('storage', (e) => this.handleStorageAction(e));
            
            // Set initial volume
            this.audio.volume = 1.0;
            
            // Initialize Media Session API for mobile notifications
            this.initializeMediaSession();
        }
        
        setupMobileBackHandling() {
            // Handle browser back/forward navigation
            window.addEventListener('popstate', (e) => this.handlePopState(e));
            
            // Push initial state
            if (!window.history.state) {
                window.history.replaceState({ page: 'artists' }, '', '');
            }
        }
        
        handlePopState(event) {
            // Handle browser back button on mobile
            const state = event.state;
            if (state && state.page) {
                switch (state.page) {
                    case 'artists':
                        this.showPage('artistsPage');
                        break;
                    case 'albums':
                        this.showPage('albumsPage');
                        break;
                    case 'player':
                        this.showPage('playerPage');
                        break;
                }
            } else {
                // Default to artists page
                this.showPage('artistsPage');
            }
        }
        
        initializeMediaSession() {
            // Check if Media Session API is supported
            if ('mediaSession' in navigator) {
                navigator.mediaSession.setActionHandler('play', () => this.play());
                navigator.mediaSession.setActionHandler('pause', () => this.pause());
                navigator.mediaSession.setActionHandler('previoustrack', () => this.previousTrack());
                navigator.mediaSession.setActionHandler('nexttrack', () => this.nextTrack());
                
                // Optional: Handle seek actions if supported
                try {
                    navigator.mediaSession.setActionHandler('seekbackward', (details) => {
                        this.audio.currentTime = Math.max(this.audio.currentTime - (details.seekOffset || 10), 0);
                    });
                    navigator.mediaSession.setActionHandler('seekforward', (details) => {
                        this.audio.currentTime = Math.min(this.audio.currentTime + (details.seekOffset || 10), this.audio.duration);
                    });
                } catch (error) {
                    // Seek actions not supported on this device
                }
            }
        }
        
        updateMediaSession() {
            if ('mediaSession' in navigator && this.currentPlaylist.length > 0) {
                const track = this.currentPlaylist[this.currentTrackIndex];
                
                navigator.mediaSession.metadata = new MediaMetadata({
                    title: track.title,
                    artist: track.creator,
                    album: track.album,
                    artwork: [
                        {
                            src: `https://redscientist.com/Content/music/${track.albumId}/frontweb.jpg`,
                            sizes: '512x512',
                            type: 'image/jpeg'
                        }
                    ]
                });
                
                // Update playback state
                navigator.mediaSession.playbackState = this.isPlaying ? 'playing' : 'paused';
            }
        }
        
        showPage(pageId) {
            const pages = [this.artistsPage, this.albumsPage, this.playerPage];
            pages.forEach(page => page.classList.remove('active'));
            document.getElementById(pageId).classList.add('active');
            this.currentPage = pageId.replace('Page', '');
            
            // Show/hide main header based on current page
            if (pageId === 'artistsPage') {
                this.mainHeader.classList.remove('hidden');
            } else {
                this.mainHeader.classList.add('hidden');
            }
            
            // Update mini player visibility
            this.updateMiniPlayerVisibility();
            
            // Scroll to top when changing pages
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }
        
        navigateToPage(pageId, shouldAddToHistory = true) {
            const pageName = pageId.replace('Page', '');
            
            // Update browser history for mobile back button support
            if (shouldAddToHistory && window.history.state?.page !== pageName) {
                window.history.pushState({ page: pageName }, '', '');
            } else if (!shouldAddToHistory) {
                window.history.replaceState({ page: pageName }, '', '');
            }
            
            this.showPage(pageId);
        }
        
        updateMiniPlayerVisibility() {
            // Show mini player if music is loaded and not on player page
            const shouldShowMiniPlayer = this.currentPlaylist.length > 0 && 
                                       this.currentPage !== 'player';
            
            if (shouldShowMiniPlayer) {
                this.miniPlayer.classList.add('visible');
                document.body.classList.add('mini-player-visible');
            } else {
                this.miniPlayer.classList.remove('visible');
                document.body.classList.remove('mini-player-visible');
            }
        }
        
        updateMiniPlayer() {
            if (this.currentPlaylist.length > 0 && this.currentTrackIndex >= 0) {
                const track = this.currentPlaylist[this.currentTrackIndex];
                
                // Update mini player track info
                this.miniTrackTitle.textContent = track.title;
                this.miniTrackArtist.textContent = track.creator;
                
                // Update mini player album art
                if (track.image) {
                    this.miniAlbumArt.src = track.image;
                } else {
                    this.miniAlbumArt.src = `https://redscientist.com/Content/music/${track.albumId}/folder.jpg`;
                }
                
                // Update mini player play/pause state
                if (this.isPlaying) {
                    this.miniPlayPauseBtn.classList.remove('play');
                    this.miniPlayPauseBtn.classList.add('pause');
                    this.miniPlayPauseBtn.innerHTML = '⏸';
                } else {
                    this.miniPlayPauseBtn.classList.remove('pause');
                    this.miniPlayPauseBtn.classList.add('play');
                    this.miniPlayPauseBtn.innerHTML = '▶';
                }
                
                // Save state to localStorage for other pages
                this.saveMusicStateToStorage();
            }
            
            this.updateMiniPlayerVisibility();
        }
        
        saveMusicStateToStorage() {
            const musicState = {
                isPlaying: this.isPlaying,
                currentTrack: this.currentPlaylist[this.currentTrackIndex],
                currentPage: this.currentPage,
                hasPlaylist: this.currentPlaylist.length > 0,
                progress: this.audio.duration ? (this.audio.currentTime / this.audio.duration) * 100 : 0,
                timestamp: Date.now()
            };
            
            try {
                localStorage.setItem('JamsMusicState', JSON.stringify(musicState));
            } catch (e) {
                console.warn('Could not save music state to localStorage:', e);
            }
        }
        
        showArtistsPage() {
            this.navigateToPage('artistsPage', false); // Don't add to history when going back
        }
        
        showAlbumsPage() {
            this.navigateToPage('albumsPage', false); // Don't add to history when going back
        }
        
        showPlayerPage() {
            this.navigateToPage('playerPage', true); // Add to history when moving forward
        }
        
        showAlbumArtModal() {
            if (!this.currentPlaylist.length || this.currentTrackIndex < 0) return;
            
            const track = this.currentPlaylist[this.currentTrackIndex];
            if (!track) return;
            
            // Create the modal content
            const modalContent = document.createElement('div');
            
            // Try to use the highest quality image available
            const highResImage = `https://redscientist.com/Content/music/${track.albumId}/front.jpg`;
            const fallbackImage = `https://redscientist.com/Content/music/${track.albumId}/folder.jpg`;
            
            modalContent.innerHTML = `
                <img class="album-art-modal-image" 
                     src="${highResImage}" 
                     alt="Album Art"
                     onerror="this.src='${fallbackImage}'">
                <div class="album-art-modal-info">
                    <div class="album-art-modal-title">${track.album}</div>
                    <div class="album-art-modal-details">${track.creator} • ${track.title}</div>
                </div>
            `;
            
            // Open the modal with custom styling
            Modals.open({
                title: '',
                content: modalContent,
                confirmText: 'Close',
                showCancel: false,
                closeOnOverlay: true,
                onConfirm: () => {
                    // Modal will close automatically
                }
            });
            
            // Add custom class to the modal for styling
            setTimeout(() => {
                const modalBox = document.querySelector('.modal-box');
                if (modalBox) {
                    modalBox.closest('.modal-overlay').classList.add('album-art-modal');
                }
            }, 10);
        }
        
        handleMouseBackButton(event) {
            // Check if it's the back button (button 3)
            if (event.button === 3) {
                event.preventDefault();
                
                // Navigate based on current page
                switch (this.currentPage) {
                    case 'albums':
                        this.showArtistsPage();
                        break;
                    case 'player':
                        this.showAlbumsPage();
                        break;
                    // Artists page is the root, so no back action needed
                }
            }
        }
        
        handleStorageAction(event) {
            if (event.key === 'jamsMusicAction') {
                try {
                    const action = JSON.parse(event.newValue);
                    
                    // Only respond to recent actions (within 5 seconds)
                    if (Date.now() - action.timestamp < 5000) {
                        switch (action.action) {
                            case 'togglePlayPause':
                                this.togglePlayPause();
                                break;
                            case 'clearPlaylist':
                                this.clearPlaylistAndHideMiniPlayer();
                                break;
                            case 'showClearConfirmation':
                                this.showClearPlaylistModal();
                                break;
                            // Add more actions as needed
                        }
                    }
                } catch (e) {
                    console.warn('Could not parse storage action:', e);
                }
            }
        }
        
        async loadArtists() {
            try {
                const response = await fetch('https://redscientist.com/Content/data/music.json');
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                
                if (!data.artists || !Array.isArray(data.artists)) {
                    throw new Error('Invalid data structure: artists array not found');
                }
                
                this.artists = data.artists.filter(artist => artist.id !== 'shuffle');
                this.renderArtists();
            } catch (error) {
                console.error('Error loading artists:', error);
                
                // Show modal for critical network errors
                if (error.message.includes('HTTP') || error.message.includes('fetch')) {
                    Modals.alert(
                        'Unable to connect to the music catalog. Please check your internet connection and try again.',
                        'Connection Error'
                    );
                }
                
                this.artistsGrid.innerHTML = `
                    <div class="error-state">
                        <div class="error-message">Error loading artists</div>
                        <div style="font-size: 0.8rem; color: var(--text-accent); margin: 0.5rem 0;">
                            ${error.message}
                        </div>
                        <button class="retry-btn" onclick="location.reload()">Retry</button>
                    </div>
                `;
            }
        }
        
        renderArtists() {
            this.artistsGrid.innerHTML = '';
            this.artists.forEach(artist => {
                const artistCard = document.createElement('div');
                artistCard.className = 'artist-card';
                
                const artistImageUrl = `https://redscientist.com/Content/banners/${artist.id}.jpg`;
                
                artistCard.innerHTML = `
                    <img class="artist-image" src="${artistImageUrl}" alt="${artist.name}" 
                         onerror="this.style.display='none';">
                    <div class="artist-name">${artist.name}</div>
                `;
                
                artistCard.addEventListener('click', () => this.selectArtist(artist));
                this.artistsGrid.appendChild(artistCard);
            });
        }
        
        async selectArtist(artist) {
            this.currentArtist = artist;
            this.artistPageTitle.textContent = `${artist.name}`;
            
            // Update artist Redscientist button
            this.artistRedscientistBtn.href = `https://redscientist.com/artist/${artist.id}`;
            
            // Update artist banner
            const artistImageUrl = `https://redscientist.com/Content/banners/${artist.id}.jpg`;
            this.artistBanner.src = artistImageUrl;
            this.artistBanner.alt = `${artist.name} Banner`;
            this.artistBanner.style.display = 'block';
            
            // Hide banner if it fails to load
            this.artistBanner.onerror = () => {
                this.artistBanner.style.display = 'none';
            };
            
            // Show loading state
            this.albumsGrid.innerHTML = `
                <div class="loading-state">
                    <div class="loading-spinner"></div>
                    <div>Loading albums...</div>
                </div>
            `;
            
            this.navigateToPage('albumsPage', true); // Navigate forward to albums page
            
            try {
                const response = await fetch(`https://redscientist.com/Content/data/${artist.id}.json`);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const responseText = await response.text();
                
                // Try to parse JSON with error handling
                let data;
                try {
                    data = JSON.parse(responseText);
                } catch (jsonError) {
                    console.error('JSON Parse Error:', jsonError);
                    console.error('Response text:', responseText);
                    
                    // Try to fix common JSON issues
                    let fixedJson = responseText
                        .replace(/,(\s*[}\]])/g, '$1')  // Remove trailing commas
                        .replace(/([{,]\s*)(\w+):/g, '$1"$2":');  // Add quotes to unquoted keys
                    
                    try {
                        data = JSON.parse(fixedJson);
                        console.log('Successfully parsed JSON after fixes');
                    } catch (fixError) {
                        throw new Error(`Invalid JSON format: ${jsonError.message}`);
                    }
                }
                
                if (!data.albums || !Array.isArray(data.albums)) {
                    throw new Error('Invalid data structure: albums array not found');
                }
                
                this.renderAlbums(data.albums);
            } catch (error) {
                console.error('Error loading albums:', error);
                this.albumsGrid.innerHTML = `
                    <div class="error-state">
                        <div class="error-message">Error loading albums</div>
                        <div style="font-size: 0.8rem; color: var(--text-accent); margin: 0.5rem 0;">
                            ${error.message}
                        </div>
                        <button class="retry-btn" onclick="window.musicPlayer.selectArtist(window.musicPlayer.currentArtist)">Retry</button>
                    </div>
                `;
            }
        }
        
        renderAlbums(albums) {
            this.albumsGrid.innerHTML = '';
            albums.forEach(album => {
                const albumCard = document.createElement('div');
                albumCard.className = 'album-card';
                
                const albumCoverUrl = `https://redscientist.com/Content/music/${album.id}/frontweb.jpg`;
                
                albumCard.innerHTML = `
                    <img class="album-cover" src="${albumCoverUrl}" alt="${album.name}">
                    <div class="album-title">${album.name}</div>
                    <div class="album-year">${album.year}</div>
                `;
                
                albumCard.addEventListener('click', () => this.selectAlbum(album));
                this.albumsGrid.appendChild(albumCard);
            });
        }
        
        async selectAlbum(album) {
            this.currentAlbum = album;
            this.albumPageTitle.textContent = `${album.name} (${album.year})`;
            
            // Show loading state in player page
            this.tracksList.innerHTML = `
                <div class="loading-state">
                    <div class="loading-spinner"></div>
                    <div>Loading tracks...</div>
                </div>
            `;
            
            this.navigateToPage('playerPage', true); // Navigate forward to player page
            
            try {
                const response = await fetch(`https://redscientist.com/Content/music/${album.id}/playlist.xml`);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const xmlText = await response.text();
                const parser = new DOMParser();
                const xmlDoc = parser.parseFromString(this.sanitizeXML(xmlText), 'text/xml');
                
                // Check for XML parsing errors
                const parseError = xmlDoc.querySelector('parsererror');
                if (parseError) {
                    console.error('XML parsing error:', parseError.textContent);
                    throw new Error(`Invalid XML format: ${parseError.textContent}`);
                }
                
                const trackElements = xmlDoc.getElementsByTagName('track');
                if (trackElements.length === 0) {
                    throw new Error('No tracks found in playlist');
                }
                
                const tracks = Array.from(trackElements).map((trackEl, index) => {
                    const location = trackEl.getElementsByTagName('location')[0]?.textContent || '';
                    const title = trackEl.getElementsByTagName('title')[0]?.textContent || 'Unknown Title';
                    const creator = trackEl.getElementsByTagName('creator')[0]?.textContent || 'Unknown Artist';
                    const albumName = trackEl.getElementsByTagName('album')[0]?.textContent || 'Unknown Album';
                    const image = trackEl.getElementsByTagName('image')[0]?.textContent || '';
                    
                    return {
                        index: index + 1,
                        title,
                        creator,
                        album: albumName,
                        location: `https://redscientist.com/Content/${location}`,
                        image: image ? `https://redscientist.com/Content/${image}` : '',
                        albumId: album.id
                    };
                });
                
                this.currentPlaylist = tracks;
                this.renderTracks(tracks);
                this.generateShuffledIndices();
                
                // Auto-play the first track
                if (tracks.length > 0) {
                    this.playTrack(0);
                }
            } catch (error) {
                console.error('Error loading tracks:', error);
                
                // Show modal for critical track loading errors
                if (error.message.includes('HTTP') || error.message.includes('fetch') || error.message.includes('No tracks found')) {
                    Modals.alert(
                        'Unable to load tracks from this album. Please try another album or check your connection.',
                        'Album Error'
                    );
                }
                
                this.tracksList.innerHTML = `
                    <div class="error-state">
                        <div class="error-message">Error loading tracks</div>
                        <div style="font-size: 0.8rem; color: var(--text-accent); margin: 0.5rem 0;">
                            ${error.message}
                        </div>
                        <button class="retry-btn" onclick="window.musicPlayer.selectAlbum(window.musicPlayer.currentAlbum)">Retry</button>
                    </div>
                `;
            }
        }
        
        renderTracks(tracks) {
            this.tracksList.innerHTML = '';
            
            // Check if we're in playlist/shuffle mode by looking at the album page title
            const isPlaylistMode = this.albumPageTitle.textContent === 'Shuffle';
            
            tracks.forEach((track, index) => {
                const trackEl = document.createElement('div');
                trackEl.className = 'track-item';
                
                // In playlist mode, show "Artist - TrackName", otherwise just track name
                const displayName = isPlaylistMode ? `${track.creator} - ${track.title}` : track.title;
                
                trackEl.innerHTML = `
                    <div class="track-number">${track.index}</div>
                    <div class="track-name">${displayName}</div>
                `;
                trackEl.addEventListener('click', () => this.playTrack(index));
                this.tracksList.appendChild(trackEl);
            });
        }
        
        playTrack(index) {
            if (!this.currentPlaylist.length) return;
            
            this.currentTrackIndex = index;
            const track = this.currentPlaylist[index];
            
            // Update UI
            document.querySelectorAll('.track-item').forEach(el => el.classList.remove('playing'));
            if (document.querySelectorAll('.track-item')[index]) {
                document.querySelectorAll('.track-item')[index].classList.add('playing');
            }
            
            // Update current track display
            this.currentTrackTitle.textContent = track.title;
            this.currentTrackArtist.textContent = track.creator;
            this.currentTrackAlbum.textContent = track.album;
            
            // Update album art - use front.jpg for higher resolution
            this.currentAlbumArt.src = `https://redscientist.com/Content/music/${track.albumId}/front.jpg`;
            
            
            // Load and play track
            this.audio.src = track.location;
            this.audio.load();
            this.play();
            
            // Update mini player
            this.updateMiniPlayer();
            
            // Update media session for mobile notifications
            this.updateMediaSession();

            // Update browser tab title
            document.title = `${track.creator} - ${track.title}`;
            
            // Save state to memory
            this.savePlayerState();
        }
        
        play() {
            this.audio.play().then(() => {
                this.isPlaying = true;
                this.playPauseBtn.classList.remove('play');
                this.playPauseBtn.classList.add('pause');
                this.updateMiniPlayer();
                this.updateMediaSession();
                
                // Update browser tab title when resuming playback
                if (this.currentPlaylist.length > 0 && this.currentTrackIndex >= 0) {
                    const track = this.currentPlaylist[this.currentTrackIndex];
                    document.title = `${track.creator} - ${track.title}`;
                }
            }).catch(error => {
                console.error('Error playing audio:', error);
                Modals.alert('Unable to play this track. Please try another song.', 'Playback Error');
            });
        }
        
        pause() {
            this.audio.pause();
            this.isPlaying = false;
            this.playPauseBtn.classList.remove('pause');
            this.playPauseBtn.classList.add('play');
            this.updateMiniPlayer();
            this.updateMediaSession();
            // Optionally restore default title when paused
            document.title = 'Jams - Music Player';
        }
        
        togglePlayPause() {
            if (this.isPlaying) {
                this.pause();
            } else {
                if (this.currentPlaylist.length && !this.audio.src) {
                    this.playTrack(0);
                } else {
                    this.play();
                }
            }
        }
        
        nextTrack() {
            if (!this.currentPlaylist.length) return;
            
            let nextIndex;
            if (this.shuffleMode) {
                this.shuffleIndex = (this.shuffleIndex + 1) % this.shuffledIndices.length;
                nextIndex = this.shuffledIndices[this.shuffleIndex];
            } else {
                nextIndex = (this.currentTrackIndex + 1) % this.currentPlaylist.length;
            }
            
            this.playTrack(nextIndex);
        }
        
        previousTrack() {
            if (!this.currentPlaylist.length) return;
            
            let prevIndex;
            if (this.shuffleMode) {
                this.shuffleIndex = this.shuffleIndex > 0 ? this.shuffleIndex - 1 : this.shuffledIndices.length - 1;
                prevIndex = this.shuffledIndices[this.shuffleIndex];
            } else {
                prevIndex = this.currentTrackIndex > 0 ? this.currentTrackIndex - 1 : this.currentPlaylist.length - 1;
            }
            
            this.playTrack(prevIndex);
        }
        
        toggleShuffle() {
            this.shuffleMode = !this.shuffleMode;
            this.shuffleBtn.classList.toggle('active', this.shuffleMode);
            
            if (this.shuffleMode) {
                this.generateShuffledIndices();
                // Find current track in shuffled array
                this.shuffleIndex = this.shuffledIndices.indexOf(this.currentTrackIndex);
            }
            
            // Save state to memory
            this.savePlayerState();
        }
        
        generateShuffledIndices() {
            this.shuffledIndices = Array.from({length: this.currentPlaylist.length}, (_, i) => i);
            for (let i = this.shuffledIndices.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [this.shuffledIndices[i], this.shuffledIndices[j]] = [this.shuffledIndices[j], this.shuffledIndices[i]];
            }
        }
        
        sanitizeXML(xmlText) {
            // Handle unescaped ampersands in XML content while preserving valid XML structure
            return xmlText
                // First, temporarily protect already escaped entities
                .replace(/&amp;/g, '__AMP_PLACEHOLDER__')
                .replace(/&lt;/g, '__LT_PLACEHOLDER__')
                .replace(/&gt;/g, '__GT_PLACEHOLDER__')
                .replace(/&quot;/g, '__QUOT_PLACEHOLDER__')
                .replace(/&apos;/g, '__APOS_PLACEHOLDER__')
                // Then escape remaining unescaped ampersands
                .replace(/&/g, '&amp;')
                // Restore the placeholders back to proper entities
                .replace(/__AMP_PLACEHOLDER__/g, '&amp;')
                .replace(/__LT_PLACEHOLDER__/g, '&lt;')
                .replace(/__GT_PLACEHOLDER__/g, '&gt;')
                .replace(/__QUOT_PLACEHOLDER__/g, '&quot;')
                .replace(/__APOS_PLACEHOLDER__/g, '&apos;');
        }
        
        setVolume(value) {
            this.audio.volume = value / 100;
            // Save state immediately when volume changes
            if (this.currentPlaylist.length > 0) {
                this.savePlayerState();
            }
        }
        
        seek(event) {
            const rect = this.progressBar.getBoundingClientRect();
            const percent = (event.clientX - rect.left) / rect.width;
            this.audio.currentTime = percent * this.audio.duration;
        }
        
        updateProgress() {
            if (this.audio.duration) {
                const percent = (this.audio.currentTime / this.audio.duration) * 100;
                this.progressFill.style.width = percent + '%';
                this.miniProgressFill.style.width = percent + '%';
                this.currentTime.textContent = this.formatTime(this.audio.currentTime);
                
                // Save state every few seconds
                if (!this.lastStateSave || Date.now() - this.lastStateSave > 5000) {
                    this.savePlayerState();
                    this.lastStateSave = Date.now();
                }
            }
        }
        
        updateDuration() {
            this.totalTime.textContent = this.formatTime(this.audio.duration);
        }
        
        formatTime(seconds) {
            if (isNaN(seconds)) return '0:00';
            const mins = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${mins}:${secs.toString().padStart(2, '0')}`;
        }
        
        async shuffleAllMusic() {
            try {
                // Disable button and show loading state
                this.shuffleAllBtn.disabled = true;
                this.shuffleAllBtn.textContent = 'Loading Music...';
                
                console.log('Starting shuffle all music...');
                
                // Get all artists (already loaded)
                if (!this.artists.length) {
                    await this.loadArtists();
                }
                
                let allTracks = [];
                
                // Fetch all albums and tracks from all artists
                for (let artistIndex = 0; artistIndex < this.artists.length; artistIndex++) {
                    const artist = this.artists[artistIndex];
                    this.shuffleAllBtn.textContent = `Loading ${artist.name}... (${artistIndex + 1}/${this.artists.length})`;
                    
                    try {
                        // Fetch artist albums
                        const artistResponse = await fetch(`https://redscientist.com/Content/data/${artist.id}.json`);
                        if (!artistResponse.ok) {
                            console.warn(`Failed to load artist ${artist.name}:`, artistResponse.status);
                            continue;
                        }
                        
                        const artistData = await artistResponse.json();
                        
                        if (!artistData.albums || !Array.isArray(artistData.albums)) {
                            console.warn(`Invalid albums data for artist ${artist.name}`);
                            continue;
                        }
                        
                        // Fetch tracks from each album
                        for (const album of artistData.albums) {
                            try {
                                const playlistResponse = await fetch(`https://redscientist.com/Content/music/${album.id}/playlist.xml`);
                                if (!playlistResponse.ok) {
                                    console.warn(`Failed to load album ${album.name}:`, playlistResponse.status);
                                    continue;
                                }
                                
                                const xmlText = await playlistResponse.text();
                                const parser = new DOMParser();
                                const xmlDoc = parser.parseFromString(this.sanitizeXML(xmlText), 'text/xml');
                                
                                const trackElements = xmlDoc.getElementsByTagName('track');
                                
                                Array.from(trackElements).forEach((trackEl, index) => {
                                    const location = trackEl.getElementsByTagName('location')[0]?.textContent || '';
                                    const title = trackEl.getElementsByTagName('title')[0]?.textContent || 'Unknown Title';
                                    const creator = trackEl.getElementsByTagName('creator')[0]?.textContent || artist.name;
                                    const albumName = trackEl.getElementsByTagName('album')[0]?.textContent || album.name;
                                    const image = trackEl.getElementsByTagName('image')[0]?.textContent || '';
                                    
                                    if (location) {
                                        allTracks.push({
                                            index: index + 1,
                                            title,
                                            creator,
                                            album: albumName,
                                            location: `https://redscientist.com/Content/${location}`,
                                            image: image ? `https://redscientist.com/Content/${image}` : '',
                                            albumId: album.id,
                                            artistId: artist.id,
                                            albumYear: album.year || ''
                                        });
                                    }
                                });
                                
                            } catch (albumError) {
                                console.warn(`Error processing album ${album.name}:`, albumError);
                                continue;
                            }
                        }
                        
                    } catch (artistError) {
                        console.warn(`Error processing artist ${artist.name}:`, artistError);
                        continue;
                    }
                }
                
                console.log(`Loaded ${allTracks.length} total tracks`);
                
                if (allTracks.length === 0) {
                    throw new Error('No tracks found in the catalog');
                }
                
                // Show warning if very few tracks found
                if (allTracks.length < 50) {
                    const proceed = await Modals.confirm(
                        `Only ${allTracks.length} tracks found. Continue with shuffle?`,
                        'Limited Tracks',
                        'Continue',
                        'Cancel'
                    );
                    if (!proceed) {
                        return; // User cancelled
                    }
                }
                
                // Shuffle all tracks and select 420 (or all if less than 420)
                const shuffledTracks = [...allTracks];
                for (let i = shuffledTracks.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [shuffledTracks[i], shuffledTracks[j]] = [shuffledTracks[j], shuffledTracks[i]];
                }
                
                const selectedTracks = shuffledTracks.slice(0, Math.min(420, shuffledTracks.length));
                
                // Re-index the tracks for the mega playlist
                selectedTracks.forEach((track, index) => {
                    track.index = index + 1;
                });
                
                // Set up the mega playlist
                this.currentPlaylist = selectedTracks;
                this.currentArtist = null; // No artist context for shuffle - back goes to artists page
                this.currentAlbum = { 
                    name: 'Shuffle', 
                    id: 'shuffle-all',
                    year: new Date().getFullYear()
                };
                
                // Update page titles
                this.albumPageTitle.textContent = 'Shuffle';
                
                // Navigate to player page
                this.navigateToPage('playerPage', true);
                
                // Render the track list
                this.renderTracks(selectedTracks);
                
                // Generate new shuffle indices for the mega playlist
                this.generateShuffledIndices();
                
                // Auto-play the first track
                if (selectedTracks.length > 0) {
                    this.playTrack(0);
                }
                
                console.log(`Created mega playlist with ${selectedTracks.length} songs`);
                
            } catch (error) {
                console.error('Error creating shuffle playlist:', error);
                Modals.alert(`Error creating shuffle playlist: ${error.message}`, 'Shuffle Error');
            } finally {
                // Re-enable button
                this.shuffleAllBtn.disabled = false;
                this.shuffleAllBtn.textContent = 'Shuffle';
            }
        }
        
        handleAudioError() {
            console.error('Audio error occurred');
            this.pause();
            
            // Show modal if it's a critical error that prevents playback
            if (this.currentPlaylist.length > 0 && this.currentTrackIndex >= 0) {
                const track = this.currentPlaylist[this.currentTrackIndex];
                Modals.alert(
                    `Unable to play "${track.title}". Trying next track...`,
                    'Playback Error'
                );
            }
            
            // Try next track if current fails
            setTimeout(() => this.nextTrack(), 1000);
        }
    }
    
    // Initialize the music player when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
        window.musicPlayer = new MusicPlayer();
    });
    </script>
</body>
</html>
