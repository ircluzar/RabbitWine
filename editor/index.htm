<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Rabbit Wine</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <link rel="stylesheet" href="editor.css">
    <link rel="stylesheet" href="../stars.css">
    <link rel="stylesheet" href="../modals.css">
    <script src="../modals.js"></script>
    <style>
        .layer-controls {
            display: flex;
            gap: 8px;
            align-items: center;
            margin-bottom: 12px;
        }
        .layer-btn {
            padding: 8px 16px;
            background: var(--button-bg);
            border: 1px solid var(--border-color);
            border-radius: 6px;
            color: var(--text-primary);
            cursor: pointer;
            font-size: 12px;
            transition: all 0.2s ease;
            text-align: center;
        }
        .layer-btn.active {
            background: var(--button-active);
            border-color: var(--success-color);
        }
        .layer-btn:hover {
            background: var(--button-hover);
        }
        .brush-shape-controls {
            display: flex;
            gap: 8px;
            align-items: center;
        }
        .brush-shape-btn {
            padding: 6px 12px;
            background: var(--button-bg);
            border: 1px solid var(--border-color);
            border-radius: 4px;
            color: var(--text-primary);
            cursor: pointer;
            font-size: 12px;
            transition: all 0.2s ease;
        }
        .brush-shape-btn.active {
            background: var(--button-active);
            border-color: var(--success-color);
        }
        .brush-shape-btn:hover {
            background: var(--button-hover);
        }
        .color-picker-popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: var(--bg-secondary);
            border: 2px solid var(--border-color);
            border-radius: 12px;
            padding: 20px;
            z-index: 1000;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            max-width: 320px;
        }
        .color-picker-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
        }
        .preset-colors {
            display: grid;
            grid-template-columns: repeat(8, 1fr);
            gap: 4px;
            margin-bottom: 12px;
        }
        .preset-color {
            width: 24px;
            height: 24px;
            border-radius: 4px;
            border: 1px solid var(--border-color);
            cursor: pointer;
            transition: all 0.2s;
        }
        .preset-color:hover {
            border: 2px solid var(--success-color);
        }
        .hex-input {
            width: 100%;
            padding: 8px;
            background: var(--button-bg);
            border: 1px solid var(--border-color);
            border-radius: 6px;
            color: var(--text-primary);
            font-size: 14px;
            margin-bottom: 12px;
        }
        .color-picker-buttons {
            display: flex;
            gap: 8px;
            justify-content: flex-end;
        }
        .background-color-indicator {
            width: 20px;
            height: 20px;
            border-radius: 4px;
            border: 1px solid var(--border-color);
            display: inline-block;
            margin-left: 8px;
        }
        .layer-info {
            font-size: 12px;
            color: var(--text-accent);
            margin-top: 4px;
        }
    </style>
</head>
<body>
    <div class="background-animation" id="backgroundAnimation"></div>
    <audio id="bgMusic" loop preload="auto">
        <source src="editor.mp3" type="audio/mpeg">
        <source src="editor.ogg" type="audio/ogg">
    </audio>

    <div class="editor-container">
        <div class="panel">
            <div class="tools">
                <div class="tool-section">
                    <div class="section-label align-palette">Color Palette</div>
                    <div class="palette-grid" id="pal"></div>
                </div>
                <div class="tools-row">
                    <div class="tool-section">
                        <div class="section-label align-bg-indicator">Layers</div>
                        <div class="layer-controls">
                            <div class="background-color-indicator" id="bgColorIndicator"></div>
                            <button class="layer-btn" id="layerBg">Back</button>
                            <button class="layer-btn" id="layerMid">Middle</button>
                            <button class="layer-btn active" id="layerFg">Front</button>
                        </div>
                    </div>
                    <div class="tool-section">
                        <div class="controls">
                            <div class="control-group">
                                <div class="section-label">Brush</div>
                                <div class="brush-controls-combo">
                                    <select class="select-box brush-size-select" id="brushSel">
                                        <option value="1">1px</option>
                                        <option value="2">2px</option>
                                        <option value="3">3px</option>
                                        <option value="4" selected>4px</option>
                                        <option value="5">5px</option>
                                        <option value="8">8px</option>
                                        <option value="16">16px</option>
                                        <option value="32">32px</option>
                                    </select>
                                    <button class="brush-shape-btn active" id="brushSquare" title="Square Brush"><span class="brush-shape-icon square"></span></button>
                                    <button class="brush-shape-btn" id="brushRound" title="Round Brush"><span class="brush-shape-icon circle"></span></button>
                                </div>
                            </div>
                            <div class="control-group">
                                <div class="section-label align-undo">Actions</div>
                                <div class="undo-controls">
                                    <button class="btn" id="undoBtn" disabled>Undo</button>
                                    <button class="btn" id="redoBtn" disabled>Redo</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="panel canvas-panel">
            <div class="canvas-container">
                <canvas id="cvs" width="256" height="240"></canvas>
            </div>
        </div>
        <div class="panel">
            <div class="footer">
                <div class="footer-main">
                    <button class="btn primary" id="dl">Download</button>
                    <button class="btn" id="clip">Copy to Clipboard</button>
                    <button class="btn" id="clearBtn">Clear</button>
                </div>
                <div class="music-controls">
                    <button class="music-btn" id="musicMute">ðŸ”‡</button>
                    <button class="music-btn active" id="musicLow">ðŸ”‰</button>
                    <button class="music-btn" id="musicHigh">ðŸ”Š</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Color Picker Popup -->


    <script src="../stars.js"></script>
    <script>
        const W = 256, H = 240, MAX_COL = 16;
        const TRANS = [204, 188, 252];
        
        let pal = [[0,0,0], [255,255,255], TRANS];
        let selCol = 0, brushSz = 4, drawing = false;
        let brushShape = 'square'; // 'square' or 'round'
        let currentLayer = 'fg'; // 'bg', 'mid', 'fg'
        let bgColor = [204, 188, 252]; // Background layer color
        
        // Layer data - each layer has its own pixel data
        let layers = {
            mid: Array.from({length: H}, () => Array(W).fill(2)), // Midground
            fg: Array.from({length: H}, () => Array(W).fill(2))   // Foreground
        };
        
        let lastPos = null;
        let undoStack = [];
        let redoStack = [];
        let maxUndo = 50;
        let musicSt = 'low';
        
        const cvs = $('#cvs')[0];
        const ctx = cvs.getContext('2d');
        const bgMusic = $('#bgMusic')[0];

        // Preset colors for the color picker
        const presetColors = [
  '#FF0000', // Vivid Red
  '#00FF00', // Neon Green
  '#0000FF', // Bright Blue
  '#FFFF00', // Primary Yellow
  '#FF00FF', // Electric Magenta
  '#00FFFF', // Aqua Cyan
  '#FFA500', // True Orange
  '#800080', // Royal Purple
  '#FFC0CB', // Classic Pink
  '#A52A2A', // Deep Brown
  '#808080', // Gray Standard
  '#008000', // Forest Green
  '#800000', // Crimson Red
  '#000080', // Navy Blue
  '#000000', // BLACK
  '#5B2A6F', // Dark Purple
  '#7D48A2', // Medium Purple
  '#4B0082', // Deep Violet
  '#C9A4DC', // Light Purple
  '#F7F5F2', // Off-White
  '#FFE0C4', // Light Peach
  '#6D3D7B', // Mulberry Violet
  '#ADD8E6', // Soft Blue
  '#58B2AF', // Teal
  '#4A4A4A', // Charcoal Gray
  '#46AFA9', // Teal Repeat
  '#8B0000', // Dark Red
  '#FFDCC2', // Peach Repeat
  '#5E3A6D', // Violet Repeat
  '#9B68B0', // Medium Violet
  '#D3D3D3', // Light Gray
  '#5C3975', // Deep Violet Alt
  '#8662AB', // Warm Purple
  '#DCDCDC', // Light Gray Alt
  '#A9A9A9', // Medium Gray
  '#CBC3E3', // Wisteria Glow
  '#EDEDED',  // Mist White
  '#000000', // BLACK
  '#FFB3BA', // Light Red
  '#B5EAD7', // Soft Green
  '#AEC6CF', // Baby Blue
  '#FFFACD', // Lemon Chiffon
  '#E3C5E8', // Pastel Magenta
  '#C2F0F7', // Pale Cyan
  '#FFDAB9', // Peach Orange
  '#D5A6BD', // Mauve Purple
  '#FADADD', // Baby Pink
  '#D6A77A', // Warm Taupe
  '#C0C0C0', // Light Gray
  '#A8D5BA', // Mint Green
  '#C19A6B', // Soft Rust
  '#A9A9FF', // Pastel Indigo
  '#FFDEB4', // Apricot Mist
  '#C9FFE5', // Seafoam Breeze
  '#E0BBE4', // Lilac Haze
  '#FFDFD3', // Rose Quartz
  '#CAF7E3', // Dewdrop
  '#D2E1FF', // Sky Whisper
  '#FFE5B4', // Buttercream
  '#BFD8B8', // Moss Pearl
  '#B8E2F2', // Glacier Tint
  '#E6F2D4', // Aloe Wash
  '#F6D1C1', // Coral Dust
  '#FFCAD4', // Strawberry Milk
  '#FBE8A6', // Banana Cream
  '#D8B4F8', // Lavender Bloom
  '#FFEEF0', // Frosted Blossom
  '#A7C5EB', // Icy Periwinkle
  '#E2F0CB', // Sage Whisper
  '#C1C8E4', // Misty Twilight
  '#FFD3B6', // Papaya Glow
  '#B5D0FF', // Blueberry Light
        ];

        const rgb2hex = rgb => "#" + rgb.map(x => x.toString(16).padStart(2, '0')).join('');
        const hex2rgb = hex => {
            hex = hex.replace('#','');
            if (hex.length === 3) hex = hex.split('').map(x=>x+x).join('');
            return [0,1,2].map(i=>parseInt(hex.substr(i*2,2),16));
        };

        const hint = msg => {
            const $h = $('#hint');
            const orig = $h.text();
            $h.text(msg).css('color', '#28a745');
            setTimeout(() => $h.text(orig).css('color', 'var(--text-accent)'), 2000);
        };

        const updMusicCtrl = () => {
            $('.music-btn').removeClass('active');
            $('#music' + musicSt.charAt(0).toUpperCase() + musicSt.slice(1)).addClass('active');
        };

        const setMusicSt = st => {
            musicSt = st;
            updMusicCtrl();
            
            switch(st) {
                case 'mute':
                    bgMusic.pause();
                    bgMusic.currentTime = 0;
                    break;
                case 'low':
                    bgMusic.volume = 0.5;
                    if (bgMusic.paused) {
                        bgMusic.currentTime = 0;
                        bgMusic.play().catch(() => {});
                    }
                    break;
                case 'high':
                    bgMusic.volume = 1.0;
                    if (bgMusic.paused) {
                        bgMusic.currentTime = 0;
                        bgMusic.play().catch(() => {});
                    }
                    break;
            }
        };

        const saveUndo = () => {
            const snap = {
                layer: currentLayer,
                data: currentLayer === 'bg' ? [...bgColor] : layers[currentLayer].map(row => [...row])
            };
            undoStack.push(snap);
            if (undoStack.length > maxUndo) undoStack.shift();
            redoStack = [];
            updUndoBtn();
            updRedoBtn();
        };

        const undo = () => {
            if (undoStack.length > 0) {
                const snap = undoStack.pop();
                // Save current state to redoStack
                const currentSnap = {
                    layer: snap.layer,
                    data: snap.layer === 'bg' ? [...bgColor] : layers[snap.layer].map(row => [...row])
                };
                redoStack.push(currentSnap);
                if (snap.layer === 'bg') {
                    bgColor = snap.data;
                } else {
                    layers[snap.layer] = snap.data;
                }
                redraw();
                updUndoBtn();
                updRedoBtn();
                updBgColorIndicator();
            }
        };

        const redo = () => {
            if (redoStack.length > 0) {
                const snap = redoStack.pop();
                // Save current state to undoStack
                const currentSnap = {
                    layer: snap.layer,
                    data: snap.layer === 'bg' ? [...bgColor] : layers[snap.layer].map(row => [...row])
                };
                undoStack.push(currentSnap);
                if (snap.layer === 'bg') {
                    bgColor = snap.data;
                } else {
                    layers[snap.layer] = snap.data;
                }
                redraw();
                updUndoBtn();
                updRedoBtn();
                updBgColorIndicator();
            }
        };

        const updUndoBtn = () => {
            const $u = $('#undoBtn');
            $u.prop('disabled', undoStack.length === 0);
        };
        const updRedoBtn = () => {
            const $r = $('#redoBtn');
            $r.prop('disabled', redoStack.length === 0);
        };

        const updLayerButtons = () => {
            $('.layer-btn').removeClass('active');
            $('#layer' + currentLayer.charAt(0).toUpperCase() + currentLayer.slice(1)).addClass('active');
            
            const layerNames = { bg: 'Back', mid: 'Middle', fg: 'Foreground' };
            const info = currentLayer === 'bg' ? 
                'Background - Click a color to set solid background' : 
                `Currently editing: ${layerNames[currentLayer]}`;
            $('#layerInfo').text(info);
        };

        const updBgColorIndicator = () => {
            $('#bgColorIndicator').css('background-color', rgb2hex(bgColor));
        };

        const updBrushShape = () => {
            $('.brush-shape-btn').removeClass('active');
            $('#brush' + brushShape.charAt(0).toUpperCase() + brushShape.slice(1)).addClass('active');
        };

        const updPal = () => {
            let html = '';
            pal.forEach((rgb, i) => {
                const sel = selCol === i ? ' selected' : '';
                html += `<div class="palette-color${sel}" style="background:${rgb2hex(rgb)}" data-idx="${i}"></div>`;
            });
            if (pal.length < MAX_COL) {
                html += '<div class="palette-add">âž•</div>';
            }
            $('#pal').html(html);
        };

        // Modal-based color picker
        function showColorPickerModal(onConfirm, onCancel) {
            // Build content node
            const content = document.createElement('div');
            content.innerHTML = `
                <div style="margin-bottom:10px;">Choose Color</div>
                <div class="preset-colors" id="modalPresetColors" style="display:flex;gap:8px;flex-wrap:wrap;margin-bottom:10px;"></div>
                <input type="text" class="hex-input" id="modalHexInput" placeholder="#888888" style="width:120px;">
            `;
            // Fill preset colors
            const presetDiv = content.querySelector('#modalPresetColors');
            presetColors.forEach(color => {
                const swatch = document.createElement('div');
                swatch.className = 'preset-color';
                swatch.style.backgroundColor = color;
                swatch.style.width = '28px';
                swatch.style.height = '28px';
                swatch.style.borderRadius = '6px';
                swatch.style.border = '2px solid #4a4458';
                swatch.style.cursor = 'pointer';
                swatch.onclick = () => {
                    content.querySelector('#modalHexInput').value = color;
                };
                presetDiv.appendChild(swatch);
            });
            // Open modal
            window.Modals.open({
                title: 'Add Color',
                content,
                confirmText: 'Add',
                cancelText: 'Cancel',
                onConfirm: function() {
                    const val = content.querySelector('#modalHexInput').value.trim();
                    if (/^#([0-9a-fA-F]{6})$/.test(val)) {
                        onConfirm(val);
                    } else {
                        window.Modals.alert('Please enter a valid hex color (e.g. #aabbcc)', 'Invalid Color');
                        return false;
                    }
                },
                onCancel
            });
        }

        const drawPx = (x, y, colIdx) => {
            if (x >= 0 && y >= 0 && x < W && y < H && currentLayer !== 'bg') {
                layers[currentLayer][y][x] = colIdx;
            }
        };

        const redraw = () => {
            // Clear canvas
            ctx.fillStyle = rgb2hex(bgColor);
            ctx.fillRect(0, 0, W, H);
            
            // Draw midground layer
            for (let y = 0; y < H; y++) {
                for (let x = 0; x < W; x++) {
                    const colIdx = layers.mid[y][x];
                    const color = pal[colIdx];
                    if (color && !(color[0] === TRANS[0] && color[1] === TRANS[1] && color[2] === TRANS[2])) {
                        ctx.fillStyle = rgb2hex(color);
                        ctx.fillRect(x, y, 1, 1);
                    }
                }
            }
            
            // Draw foreground layer
            for (let y = 0; y < H; y++) {
                for (let x = 0; x < W; x++) {
                    const colIdx = layers.fg[y][x];
                    const color = pal[colIdx];
                    if (color && !(color[0] === TRANS[0] && color[1] === TRANS[1] && color[2] === TRANS[2])) {
                        ctx.fillStyle = rgb2hex(color);
                        ctx.fillRect(x, y, 1, 1);
                    }
                }
            }
        };

        const resizeCvs = () => {
            // Check if we're in landscape mode (width > height)
            const isLandscape = window.innerWidth > window.innerHeight;
            const scale = isLandscape ? 2 : 1;
            
            $('#cvs').css({
                width: W * scale, 
                height: H * scale,
                'image-rendering': 'pixelated' // Ensure crisp scaling
            });
        };

        const getCvsPos = e => {
            const rect = cvs.getBoundingClientRect();
            const cX = e.touches ? e.touches[0].clientX : e.clientX;
            const cY = e.touches ? e.touches[0].clientY : e.clientY;
            
            // Get current scale factor based on orientation
            const isLandscape = window.innerWidth > window.innerHeight;
            const scale = isLandscape ? 2 : 1;
            
            return [
                Math.floor((cX - rect.left) / scale),
                Math.floor((cY - rect.top) / scale)
            ];
        };

        const drawLine = (x0, y0, x1, y1) => {
            const dx = Math.abs(x1 - x0);
            const dy = Math.abs(y1 - y0);
            const sx = x0 < x1 ? 1 : -1;
            const sy = y0 < y1 ? 1 : -1;
            let err = dx - dy;
            let x = x0, y = y0;
            
            while (true) {
                paintBrush(x, y);
                if (x === x1 && y === y1) break;
                const e2 = 2 * err;
                if (e2 > -dy) {
                    err -= dy;
                    x += sx;
                }
                if (e2 < dx) {
                    err += dx;
                    y += sy;
                }
            }
        };

        const paintBrush = (x, y) => {
            if (currentLayer === 'bg') return;
            
            const half = Math.floor(brushSz/2);
            
            if (brushShape === 'square') {
                for (let dy = -half; dy < brushSz-half; dy++) {
                    for (let dx = -half; dx < brushSz-half; dx++) {
                        drawPx(x+dx, y+dy, selCol);
                    }
                }
            } else { // round brush
                const radius = brushSz / 2;
                for (let dy = -half; dy < brushSz-half; dy++) {
                    for (let dx = -half; dx < brushSz-half; dx++) {
                        const distance = Math.sqrt(dx*dx + dy*dy);
                        if (distance <= radius) {
                            drawPx(x+dx, y+dy, selCol);
                        }
                    }
                }
            }
        };

        const paint = (x, y) => {
            if (currentLayer === 'bg') return;
            
            if (lastPos) {
                drawLine(lastPos[0], lastPos[1], x, y);
            } else {
                paintBrush(x, y);
            }
            lastPos = [x, y];
            redraw();
        };

        const expImg = () => {
            const expCvs = document.createElement('canvas');
            expCvs.width = W;
            expCvs.height = H;
            const ectx = expCvs.getContext('2d');
            const imgData = ectx.createImageData(W, H);

            for (let y = 0; y < H; y++) {
                for (let x = 0; x < W; x++) {
                    const i = (y*W + x)*4;

                    // Start with background color
                    let [r, g, b, a] = [...bgColor, 255];

                    // Apply midground layer
                    const midIdx = layers.mid[y][x];
                    const midColor = pal[midIdx];
                    if (midColor && !(midColor[0] === TRANS[0] && midColor[1] === TRANS[1] && midColor[2] === TRANS[2])) {
                        [r, g, b] = midColor;
                    }

                    // Apply foreground layer
                    const fgIdx = layers.fg[y][x];
                    const fgColor = pal[fgIdx];
                    if (fgColor && !(fgColor[0] === TRANS[0] && fgColor[1] === TRANS[1] && fgColor[2] === TRANS[2])) {
                        [r, g, b] = fgColor;
                    }

                    // If the final color is #ccbcfc (204,188,252), make it transparent
                    if (r === 204 && g === 188 && b === 252) {
                        a = 0;
                    }

                    imgData.data[i] = r;
                    imgData.data[i+1] = g;
                    imgData.data[i+2] = b;
                    imgData.data[i+3] = a;
                }
            }
            ectx.putImageData(imgData, 0, 0);
            return expCvs;
        };

        const clearAll = () => {
            window.Modals.open({
                title: 'Clear All?',
                content: 'Are you sure you want to clear all layers? This cannot be undone.',
                confirmText: 'Clear',
                cancelText: 'Cancel',
                onConfirm: function() {
                    saveUndo();
                    bgColor = [204, 188, 252];
                    layers.mid = Array.from({length: H}, () => Array(W).fill(2));
                    layers.fg = Array.from({length: H}, () => Array(W).fill(2));
                    redraw();
                    updBgColorIndicator();
                    hint('All layers cleared!');
                }
            });
        };

        // Event Listeners
        $(document).on('click', '.palette-color', function() {
            const idx = parseInt($(this).data('idx'));
            if (currentLayer === 'bg') {
                saveUndo();
                bgColor = [...pal[idx]];
                redraw();
                updBgColorIndicator();
            } else {
                selCol = idx;
                updPal();
            }
        });



        $(document).on('click', '.palette-add', function() {
            if (pal.length < MAX_COL) {
                showColorPickerModal(function(hex) {
                    // Add color to palette
                    const rgb = [
                        parseInt(hex.substr(1,2),16),
                        parseInt(hex.substr(3,2),16),
                        parseInt(hex.substr(5,2),16)
                    ];
                    pal.push(rgb);
                    selCol = pal.length - 1;
                    updPal();
                });
            }
        });

        $(document).on('click', '.preset-color', function() {
            const color = $(this).data('color');
            $('#hexInput').val(color);
        });

        $('#confirmColorPicker').on('click', function() {
            const color = $('#hexInput').val();

            if (color) {
                try {
                    pal.push(hex2rgb(color));
                    selCol = pal.length-1;
                    updPal();
                } catch (e) {
                    hint('Invalid color format!');
                }
            }
        });

        // Layer controls
        $('#layerBg').on('click', function() {
            currentLayer = 'bg';
            updLayerButtons();
        });
        $('#layerMid').on('click', function() {
            currentLayer = 'mid';
            updLayerButtons();
        });
        $('#layerFg').on('click', function() {
            currentLayer = 'fg';
            updLayerButtons();
        });

        // Brush shape controls
        $('#brushSquare').on('click', function() {
            brushShape = 'square';
            updBrushShape();
        });
        $('#brushRound').on('click', function() {
            brushShape = 'round';
            updBrushShape();
        });

        $('#brushSel').on('change', function() {
            brushSz = parseInt($(this).val());
        });



        $('#undoBtn').on('click', undo);
        $('#redoBtn').on('click', redo);
        $('#clearBtn').on('click', clearAll);

        $('#musicMute').on('click', () => setMusicSt('mute'));
        $('#musicLow').on('click', () => setMusicSt('low'));
        $('#musicHigh').on('click', () => setMusicSt('high'));

        $(document).on('keydown', function(e) {
            if (e.ctrlKey && e.key === 'z') {
                e.preventDefault();
                undo();
            } else if (e.ctrlKey && (e.key === 'y' || (e.shiftKey && e.key === 'z'))) {
                // Ctrl+Y or Ctrl+Shift+Z for redo
                e.preventDefault();
                redo();
            }
        });

        $('#cvs').on('mousedown touchstart', function(e) {
            e.preventDefault();
            if (currentLayer === 'bg') return;
            
            drawing = true;
            saveUndo();
            const [x, y] = getCvsPos(e.originalEvent);
            lastPos = null;
            paint(x, y);
        });

        $('#cvs').on('mousemove touchmove', function(e) {
            e.preventDefault();
            if (!drawing || currentLayer === 'bg') return;
            const [x, y] = getCvsPos(e.originalEvent);
            paint(x, y);
        });

        $(document).on('mouseup touchend mouseleave', () => {
            drawing = false;
            lastPos = null;
        });

        $('#dl').click(() => {
            const url = expImg().toDataURL('image/png');
            $('<a>').attr({href: url, download: 'sticker.png'})[0].click();
            hint('Downloaded!');
        });

        $('#clip').click(async () => {
            expImg().toBlob(async blob => {
                try {
                    if (navigator.clipboard?.write) {
                        await navigator.clipboard.write([new ClipboardItem({'image/png': blob})]);
                        hint('Copied to clipboard!');
                    } else {
                        hint('Clipboard not supported on this device.');
                    }
                } catch (e) {
                    hint('Failed to copy to clipboard.');
                }
            }, 'image/png');
        });

        $(() => {
            updPal();
            updLayerButtons();
            updBgColorIndicator();
            updBrushShape();
            resizeCvs();
            redraw();
            updUndoBtn();
            updRedoBtn();
            saveUndo();
            setMusicSt('low');
            
            // Handle orientation changes and window resizing
            $(window).on('resize orientationchange', function() {
                // Small delay to ensure orientation change is complete
                setTimeout(() => {
                    resizeCvs();
                }, 100);
            });
            
            $(document).one('click touchstart', function() {
                if (musicSt !== 'mute') {
                    bgMusic.play().catch(() => {});
                }
            });
        });
    </script>
</body>
</html>